{"version":3,"sources":["../src/app.ts"],"sourcesContent":["import { createCipheriv, randomBytes, scryptSync, createDecipheriv } from 'crypto';\nimport { type IEncryptionOptions, IEncryptionReturn, IDecryptionOptions } from '@/types';\n\n/**\n * Encrypts a given payload using the provided encryption or the default is 'AES-256-CBC'.\n * @param {string} payload - The string to be encrypted.\n * @returns {object} An object containing the encrypted value and initialization vector (iv).\n */\n\nexport function encrypt(payload: string, options: IEncryptionOptions): IEncryptionReturn {\n\ttry {\n\t\t// Validation\n\t\tif (!payload) {\n\t\t\tthrow new Error('Payload is required for the encryption process.');\n\t\t}\n\n\t\tif (!options.password?.trim() || !options.salt?.trim()) {\n\t\t\tthrow new Error('Both password and salt are required for encryption.');\n\t\t}\n\n\t\tconst algorithm = options.algorithm || 'aes-256-cbc';\n\t\tconst encodingInput = options.encodingInput || 'utf8';\n\t\tconst encodingOutput = options.encodingOutput || 'hex';\n\t\tconst keyLength = options.keyLength || 32; // Default key length for AES-256\n\t\tconst ivSize = options.ivSize || 16;\n\n\t\tconst key = scryptSync(options.password, options.salt, keyLength);\n\t\tconst iv = randomBytes(ivSize);\n\n\t\tconst cipher = createCipheriv(algorithm, key, iv);\n\t\tlet encrypted = cipher.update(payload, encodingInput, encodingOutput);\n\t\tencrypted += cipher.final(encodingOutput);\n\n\t\treturn {\n\t\t\tmessage: 'Encrypted successfully',\n\t\t\tiv: iv.toString(encodingOutput),\n\t\t\tvalue: encrypted,\n\t\t};\n\t} catch (err) {\n\t\tconst message = err instanceof Error ? `Error encrypting data ${err.message}` : 'Unknown error';\n\t\tconsole.error(message);\n\t\tthrow new Error(message);\n\t}\n}\n\nexport function decrypt(payload: string, iv: string, options: IDecryptionOptions) {\n\t// Validation\n\tif (!payload) {\n\t\tthrow new Error('Payload is required for the decryption process.');\n\t}\n\n\tif (!options.password?.trim() || !options.salt?.trim()) {\n\t\tthrow new Error('Both password and salt are required for decryption.');\n\t}\n\tconst algorithm = options.algorithm || 'aes-256-cbc';\n\tconst password = options.password;\n\tconst salt = options.salt;\n\tconst keyLength = options.keyLength || 32;\n\tconst encodingInput = options.encodingInput || 'hex';\n\tconst encodingOutput = options.encodingOutput || 'utf8';\n\n\tconst key = scryptSync(password, salt, keyLength);\n\tconst bufferedIv = Buffer.from(iv, encodingInput);\n\n\tconst decipher = createDecipheriv(algorithm, key, bufferedIv);\n\tlet decrypted = decipher.update(payload, encodingInput, encodingOutput);\n\tdecrypted += decipher.final(encodingOutput);\n\n\treturn decrypted;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA0E;AASnE,SAAS,QAAQ,SAAiB,SAAgD;AATzF;AAUC,MAAI;AAEH,QAAI,CAAC,SAAS;AACb,YAAM,IAAI,MAAM,iDAAiD;AAAA,IAClE;AAEA,QAAI,GAAC,aAAQ,aAAR,mBAAkB,WAAU,GAAC,aAAQ,SAAR,mBAAc,SAAQ;AACvD,YAAM,IAAI,MAAM,qDAAqD;AAAA,IACtE;AAEA,UAAM,YAAY,QAAQ,aAAa;AACvC,UAAM,gBAAgB,QAAQ,iBAAiB;AAC/C,UAAM,iBAAiB,QAAQ,kBAAkB;AACjD,UAAM,YAAY,QAAQ,aAAa;AACvC,UAAM,SAAS,QAAQ,UAAU;AAEjC,UAAM,UAAM,0BAAW,QAAQ,UAAU,QAAQ,MAAM,SAAS;AAChE,UAAM,SAAK,2BAAY,MAAM;AAE7B,UAAM,aAAS,8BAAe,WAAW,KAAK,EAAE;AAChD,QAAI,YAAY,OAAO,OAAO,SAAS,eAAe,cAAc;AACpE,iBAAa,OAAO,MAAM,cAAc;AAExC,WAAO;AAAA,MACN,SAAS;AAAA,MACT,IAAI,GAAG,SAAS,cAAc;AAAA,MAC9B,OAAO;AAAA,IACR;AAAA,EACD,SAAS,KAAK;AACb,UAAM,UAAU,eAAe,QAAQ,yBAAyB,IAAI,OAAO,KAAK;AAChF,YAAQ,MAAM,OAAO;AACrB,UAAM,IAAI,MAAM,OAAO;AAAA,EACxB;AACD;AAEO,SAAS,QAAQ,SAAiB,IAAY,SAA6B;AA7ClF;AA+CC,MAAI,CAAC,SAAS;AACb,UAAM,IAAI,MAAM,iDAAiD;AAAA,EAClE;AAEA,MAAI,GAAC,aAAQ,aAAR,mBAAkB,WAAU,GAAC,aAAQ,SAAR,mBAAc,SAAQ;AACvD,UAAM,IAAI,MAAM,qDAAqD;AAAA,EACtE;AACA,QAAM,YAAY,QAAQ,aAAa;AACvC,QAAM,WAAW,QAAQ;AACzB,QAAM,OAAO,QAAQ;AACrB,QAAM,YAAY,QAAQ,aAAa;AACvC,QAAM,gBAAgB,QAAQ,iBAAiB;AAC/C,QAAM,iBAAiB,QAAQ,kBAAkB;AAEjD,QAAM,UAAM,0BAAW,UAAU,MAAM,SAAS;AAChD,QAAM,aAAa,OAAO,KAAK,IAAI,aAAa;AAEhD,QAAM,eAAW,gCAAiB,WAAW,KAAK,UAAU;AAC5D,MAAI,YAAY,SAAS,OAAO,SAAS,eAAe,cAAc;AACtE,eAAa,SAAS,MAAM,cAAc;AAE1C,SAAO;AACR;","names":[]}